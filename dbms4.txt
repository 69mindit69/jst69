1
CREATE TABLE CUSTOMERS (
    ID INT PRIMARY KEY,
    NAME VARCHAR(255),
    AGE INT,
    ADDRESS VARCHAR(255),
    SALARY DECIMAL(10, 2)
);
2
DELIMITER //

CREATE TRIGGER salary_difference_trigger_after_insert
AFTER INSERT ON CUSTOMERS
FOR EACH ROW
BEGIN
    DECLARE new_salary DECIMAL(10, 2);
    
    -- Check if this is an INSERT operation
    IF (NEW.ID IS NOT NULL) THEN
        SET new_salary = NEW.SALARY;
        SELECT CONCAT('New record inserted. ID: ', NEW.ID, ', Name: ', NEW.NAME, ', Age: ', NEW.AGE, ', Address: ', NEW.ADDRESS, ', Salary: ', new_salary) INTO @output;
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @output;
    END IF;
END //

CREATE TRIGGER salary_difference_trigger_after_update
AFTER UPDATE ON CUSTOMERS
FOR EACH ROW
BEGIN
    DECLARE old_salary DECIMAL(10, 2);
    DECLARE new_salary DECIMAL(10, 2);
    DECLARE salary_diff DECIMAL(10, 2);
    
    -- Check if this is an UPDATE operation
    IF (NEW.ID IS NOT NULL AND OLD.ID IS NOT NULL) THEN
        SET old_salary = OLD.SALARY;
        SET new_salary = NEW.SALARY;
        SET salary_diff = new_salary - old_salary;
        SELECT CONCAT('Salary updated. ID: ', NEW.ID, ', Old Salary: ', old_salary, ', New Salary: ', new_salary, ', Salary Difference: ', salary_diff) INTO @output;
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @output;
    END IF;
END //

CREATE TRIGGER salary_difference_trigger_after_delete
AFTER DELETE ON CUSTOMERS
FOR EACH ROW
BEGIN
    DECLARE old_salary DECIMAL(10, 2);
    
    -- Check if this is a DELETE operation
    IF (OLD.ID IS NOT NULL) THEN
        SET old_salary = OLD.SALARY;
        SELECT CONCAT('Record deleted. ID: ', OLD.ID, ', Name: ', OLD.NAME, ', Age: ', OLD.AGE, ', Address: ', OLD.ADDRESS, ', Salary: ', old_salary) INTO @output;
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = @output;
    END IF;
END //

DELIMITER ;
